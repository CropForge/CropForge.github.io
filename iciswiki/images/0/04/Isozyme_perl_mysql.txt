#!c:\perl\bin\perl

use DBI;


my $dbh;
my $sth;


#connect
 $dbh = DBI->connect("DBI:mysql:database=icislocal2", "root", "password")  
	         or die "CAN'T CONNECT TO DATABASE: $DBI::errstr\n";


#	1.1.1 create the ISOSER_ALLELE table
	$dbh->do ("DROP TABLE IF EXISTS isoser_allele");
	
	$dbh->do("CREATE TABLE isoser_allele (orderno mediumint(11) not null auto_increment unique,ounitid int (11),sampleno double,gid int (11), ".
	"source text (255),origin int (11),name text (255),allele text (50),mvid int (11),pdid int (11),freq double,snlevel int (11),".
	"snvalue double,mvlevel int (11),mvvalue double, KEY mvidx (mvid),KEY samplex (sampleno))" );


#	1.1.1	populate the ISOSER_ALLELE table

	
	### Retrieve the field names from iso table and extract the alleles
	 $sth=$dbh->prepare("select * from iso order by varname");
	 $sth->execute();
	 @name = @{ $sth->{NAME} };
	 $lens = @name;
	 $i = 0;
	 $j = 1;
	  while ($lens>$i) {
	 	  $result =@name[$i]=~ /\w*_\d/;
	 		if (0<$result) {
			    @allele[$j] = @name[$i];
		 	    $j = $j+1;
			}
		$i=$i+1;
	 }

	 $alen = @allele;	
	 $counter = 1;
	 $union_str = "";
	 $less_len = $alen - 1;
	 while ($counter<$less_len) {
  		 $union_str  = $union_str ." SELECT order_merge,gid,varname as name,origin,supplier as source, '".@allele[$counter]."' AS allele, @allele[$counter] AS freq FROM iso UNION ALL";
		 $counter = $counter +1;
	  }
	$union_str  = $union_str ." SELECT order_merge,gid,varname as NAME,origin,supplier as source, '".@allele[$less_len]."' AS allele, @allele[$counter] AS freq FROM iso";


	$sql =	"INSERT INTO isoser_allele ( sampleno, gid, name, origin, source, allele, freq )".
			" SELECT temp.order_merge, temp.gid, temp.name, temp.origin, temp.source, temp.allele, temp.freq".
			" FROM ($union_str )as temp".
			" WHERE (((temp.origin) Is Not Null) AND ((temp.freq)=1))";
	$sth = $dbh->prepare($sql);
	$rc = $sth->execute();
	$sth->finish();
	print ("\n1.1.1");
#1.2 Make sure all the distinct loci are identified in the gems_locname
#	1.2.1 Create iso_mvnames table 
	$dbh->do ("DROP TABLE IF EXISTS iso_mvnames");
	$dbh->do("CREATE TABLE iso_mvnames (mvid mediumint(11) not null auto_increment unique,levelno int (11),mvname text (50))");
	print ("\n1.2.1");

#	1.2.2 Append distinct alleles in the isoser_allele table
	$app ="INSERT INTO iso_mvnames ( mvname ) ".
			"SELECT DISTINCT allele AS expr1".
			" FROM isoser_allele ORDER BY allele";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.2.1");

#	1.2.3 Create ISO_LOCUS  table
	$dbh->do ("DROP TABLE IF EXISTS iso_locus");
	$dbh->do("CREATE TABLE iso_locus ( locusid mediumint(11) not null auto_increment unique, ". 
				" lname text (255),ltype text (50))");
	print ("\n1.2.3");

#   1.2.4 Append  distinct locus  to the ISO_LOCUS table
	$app =	"INSERT INTO iso_locus ( lname, ltype) ".
			" SELECT DISTINCT mid(allele,1,instr(allele,'_')-1) AS Expr1, 'allele' AS Expr2 ".
			" FROM isoser_allele ";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.2.4");

#	1.2.5	Append the locus in ISO_LOCUS table in gems_locus table
   $app = "INSERT INTO gems_locname ( locusid, lnval ) SELECT newlocus, lname".
		" FROM (SELECT (SELECT IF(max(gems_locname.locusid) is  null, 0, max(gems_locname.locusid)) ".
		" as maxlocus FROM gems_locname) + locusid AS newlocus, lname FROM iso_locus) AS x";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.2.5");

#1.3	Complete other gems information as required. Populate the tables gems_mvnames, gems_mv, gems_pd and gems_locus tables.
#	1.3.1	Append MVNAMES from ISO_MVNAMES to gems_mvnames

	$app = "INSERT INTO gems_mvnames ( mvid, mvnval) SELECT newmv, mvname ".
			" FROM (SELECT ".
            " (SELECT ".
	        " IF((max(gems_mvnames.mvid))is null,0,max(gems_mvnames.mvid)) as maxl ".
	        " FROM gems_mvnames)+mvid AS newmv,mvname ".
			" FROM iso_mvnames) AS X" ;
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.3.1");

#	1.3.2	Append unobserved allele names to gems_mvnames table.  "Unobserved" alleles can also be encoded directly into the gems_mvnames table
	$dbh->do ("INSERT INTO gems_mvnames ( mvid, mvnval ) VALUES (86, 'pgi1_3')");
	print ("\n1.3.2");

#	1.3.3	Append pdid and pdtype to gems_pd tables
	$dbh->do ( "INSERT INTO gems_pd ( pdid, pdtype ) SELECT locusid, 'isozyme' FROM gems_locname");
	print ("\n1.3.3");

#	1.3.4	Append MVIDs to gems_mv table
	$app =  "INSERT INTO gems_mv ( mvid, mvtype, pdid ) ".
			" SELECT gems_mvnames.mvid, iso_locus.LTYPE, iso_locus.LOCUSID".
			" FROM iso_locus, gems_mvnames ".
			" WHERE iso_locus.lname =mid(gems_mvnames.mvnval,1, instr(gems_mvnames.mvnval,'_')-1)";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.3.4");

#	1.3.5	Append locus to gems_locus table
	$app =	" INSERT INTO gems_locus ( mvid, locusid, pdid )".
			" SELECT gems_mvnames.mvid, gems_locname.locusid, gems_mv.pdid".
			" FROM gems_locname, gems_mv,gems_mvnames ".
			" WHERE (gems_mv.mvid = gems_mvnames.mvid) AND ".
			"(gems_locname.lnval= Mid(gems_mvnames.mvnval,1,InStr(gems_mvnames.mvnval,'_')-1))";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n1.3.5");

#1.4	Update MVID and PDID in the ISOSER_ALLELE table
#	1.4.1	Update MVID field in the ISOSER_ALLELE table
	$up_qry =	"UPDATE isoser_allele , gems_mvnames ".
				" SET isoser_allele.mvid = gems_mvnames.mvid".
				" WHERE gems_mvnames.mvnval = isoser_allele.allele";
	$dbh->do ($up_qry) ;
	print ("\n1.4.1");


#	1.4.2	Update the PDID field in the ISOSER_ALLELE table
	$up_qry =	"UPDATE isoser_allele,gems_mv  ".
				" SET isoser_allele.pdid = gems_mv.pdid".
				" WHERE gems_mv.mvid = isoser_allele.mvid " ;
	$dbh->do ($up_qry) ;
	print ("\n1.4.2");


#1.5	Look for putative heterozygotes and change its frequency to 0.5.
	$up_qry =	"UPDATE isoser_allele as a,(SELECT b.sampleno AS sampleno, b.pdid, Count(b.sampleno) AS sncount".
				" FROM isoser_allele AS b ".
				" GROUP BY b.sampleno, b.pdid ".
				" HAVING (((Count(b.sampleno))>1)))as c ".
				" SET a.freq = 0.5 ".
				" where c.sampleno = a.sampleno AND c.sncount =2 and C.PDID = a.PDID";
    $sth = $dbh->prepare($up_qry);
	$up_all = $sth->execute();  
	$sth->finish();
	print ("\n1.5");

#2.	SET UP THE STUDY
	#2.1 Set up the study in the study table
		$app_qry = "INSERT INTO study ( studyid, sname, pmkey, title, objectiv, investid, stype, sdate, edate) ".
					"VALUES (-1, 'isozyme04', 0, 'isozyme04', '-', 0, 'E', 0, 0)";
		$dbh->do ($app_qry) ;
	print ("\n1.2.1");
		
#	2.2. Define the study factor in the factor table
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-1 , -1, 'STUDY' , -1 , 201 , 134 , 123, 'C')";
		$dbh->do ($app_qry) ;
		print ("\n2.2.");
		
#	2.3 Define the study level in the level table
		$app_qry = "INSERT INTO LEVEL_C ( labelid, factorid, levelno, lvalue ) ".
					"VALUES (-1 , -1 , -1 , 'ISOZYME04')";
		$dbh->do ($app_qry) ;
		print ("\n2.3");

#	2.4 Define the study in the effect table
		$up_qry =	"INSERT INTO effect ( represno, factorid, effectid ) ".
					"VALUES (-1 , -1, -1)";
		$dbh->do ($app_qry) ;
		print ("\n2.4");

#	2.5 Define the observation units for the study effect
		$up_qry =	"INSERT INTO oindex ( ounitid, factorid, levelno, represno ) ".
					"VALUES (-1, -1, -1, -1)";
		$dbh->do ($app_qry) ;
		print ("\n2.5");


#3.  LOADING THE SAMPLE ALLELE
#	3.1	Define the FREQ variate in the VARIATE table
		$app_qry = "INSERT INTO variate ( variatid, vname, studyid, vtype, traitid, scaleid, tmethid, dtype ) ".
					"VALUES (-1, 'FREQ', -1, 'MV', 501, 508, 508, 'N')";
		$dbh->do ($app_qry) ;
		print ("\n1.2.1");

#	3.2 Define the SAMPLENO factor (and labels GID,NAME,ORIGIN,SOURCE) in the FACTOR table

#	SAMPLENO--
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-2, -2, 'SAMPLENO' , -1, 212, 219, 17, 'N')";
		$dbh->do ($app_qry) ;
		print ("\n1.2.1");

	
#	GID--	
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-3, -2, 'GID' , -1, 251, 91, 17, 'N')";
		$dbh->do ($app_qry) ;
		print ("\n1.2.1");

#	NAME--
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-4, -2, 'NAME' , -1, 251, 92, 17, 'C')";
		$dbh->do ($app_qry) ;

#	ORIGIN--
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-5, -2, 'ORIGIN' , -1, 215, 95, 17, 'N')";
		$dbh->do ($app_qry) ;

#SOURCE
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-6, -2, 'SOURCE' , -1, 251, 104, 17, 'C')";
		$dbh->do ($app_qry) ;


#	3.3 Define the allele factor (MVID) in the FACTOR table and allele (MVNAME) label
#		MVID--		
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-7, -7, 'MVID' , -1, 501, 503, 17, 'N')";
		$dbh->do ($app_qry) ;

#		MVNAME--		
		$app_qry = "INSERT INTO factor ( labelid, factorid, fname, studyid, traitid, scaleid, tmethid, ltype ) ".
					"VALUES (-7, -7, 'ALLELE' , -1, 501, 520, 17, 'C')";
		$dbh->do ($app_qry) ;

#3.4 Define the Sample by Allele effect in the EFFECT table
#		STUDY--
		$app_qry = "INSERT INTO effect ( represno, factorid, effectid ) ".
					"VALUES (-2, -1, -2)";
		$dbh->do ($app_qry) ;

#		SAMPLENO--
		$app_qry = "INSERT INTO effect ( represno, factorid, effectid ) ".
					"VALUES (-2, -2, -2)";
		$dbh->do ($app_qry) ;

#		MVID--
		$app_qry = "INSERT INTO effect ( represno, factorid, effectid ) ".
					"VALUES (-2, -7, -2)";
		$dbh->do ($app_qry) ;

#4. SET UP THE FACTOR LEVELS
#	4.1	Set up the SAMPLENO  factor
#		4.1.1 Create ISOSER_ALABELS _1 with the following fields. 
		$dbh->do ("DROP TABLE IF EXISTS iso_alabels");
		$c_qry = "CREATE TABLE iso_alabels (ORDERNO mediumint(11) not null auto_increment unique,".
				"levelno int (11),sampleno  double, gid int (11), ORIGIN int (11), SOURCE text (255),NAME text (255))";
		$dbh->do ($c_qry) ;	
		print ("\n4.1.1");

#	4.1.2 Populate the ISOSER_ALABELS_1 from the ISO table
	$up_qry =	"INSERT INTO iso_alabels ( sampleno, gid, origin, source,name )".
				" SELECT ISO.order_merge, ISO.GID, ISO.ORIGIN, ISO.supplier, ISO.varname ".
				" FROM ISO";
	$sth = $dbh->prepare($up_qry);
	$up_all = $sth->execute();
	$sth->finish();
	print ("\n4.1.2");


#4.1.3 Get the minimum of LEVELNO in LEVEL_C and LEVEL_N tables 
#		AND Update LEVELNO in ISO_ALABELS
		$up_qry =	"UPDATE iso_alabels ".
					" SET levelno =	(SELECT Min(mina) AS minlevel ".
									" FROM (SELECT min(levelno) AS mina FROM level_n ". 
									" UNION ".
						            " SELECT min(levelno) AS mina FROM level_c ) AS c) - orderno";
		$sth = $dbh->prepare($up_qry);
		$up_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.3");

#4.1.4 Append LABELS (SAMPLENO, GID, ORIGIN)   in the  LEVEL_N table
#	4.1.4.1	Append SAMPLENO  label to LEVEL_N  table 
		$app =	"INSERT INTO level_n ( labelid, factorid, levelno, lvalue )".
				" SELECT -2 AS labelid, -2 AS factorid,levelno,sampleno".
				" FROM iso_alabels";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.4.1");	

#	4.1.4.2	Append GID  label to LEVEL_N  table 
		$app =	"INSERT INTO level_n ( labelid, factorid, levelno, lvalue )".
				" SELECT -3 AS labelid, -2 AS factorid,levelno,gid".
				" FROM iso_alabels";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.4.2");

#	4.1.4.3 Append ORIGIN  label to LEVEL_N  table 
		$app =	"INSERT INTO level_n ( labelid, factorid, levelno, lvalue )".
				" SELECT -5 AS labelid, -2 AS factorid,levelno,origin".
				" FROM iso_alabels";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.4.3");

#	4.1.4.4 Append NAME label to LEVEL_C  table 
		$app =	"INSERT INTO level_c ( labelid, factorid, levelno, lvalue )".
				" SELECT -4 AS labelid, -2 AS factorid,levelno,name".
				" FROM iso_alabels";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.4.4");

#	4.1.4.5 Append SOURCE label to LEVEL_C  table 
		$app =	"INSERT INTO level_c ( labelid, factorid, levelno, lvalue )".
				" SELECT -6 AS labelid, -2 AS factorid,levelno,source".
				" FROM iso_alabels";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.1.4.5");
		
#	4.2 Set up the MVID factor 
#	4.2.1  Update the LEVELNO in the ISO_MVNAMES (contains the labels for MVID factor) table
		$up_qry =	"UPDATE iso_mvnames ".
					"SET iso_mvnames.levelno = (SELECT Min(mina) AS minlevel ".
												" FROM (SELECT min(levelno) AS mina FROM level_n ". 
												" UNION ".
												" SELECT min(levelno) AS mina FROM level_c ) AS c) - mvid";

		$sth = $dbh->prepare($up_qry);
		$up_all = $sth->execute();	
		$sth->finish();
		print ("\n4.2.1");

#	4.2.2  Append MVID factor to LEVEL_N table
		$app_qry =	"INSERT INTO level_n( labelid, factorid, levelno, lvalue ) ".
					"SELECT -7 AS Expr1, -7 AS Expr2, iso_mvnames.levelno, iso_mvnames.mvid ".
					"FROM ISO_MVNAMES ";
		$sth = $dbh->prepare($up_qry);
		$up_all = $sth->execute();		
		$sth->finish();
		print ("\n4.2.2");

#	4.2.3	Append ALLELE label to LEVEL_C table
		$app_qry =	"INSERT INTO level_c( labelid, factorid, levelno, lvalue ) ".
					"SELECT -8 AS Expr1, -7 AS Expr2, iso_mvnames.levelno, iso_mvnames.mvname ".
					"FROM iso_mvnames";
		$sth = $dbh->prepare($app_qry);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n4.2.3");

#5.	SET UP THE OBSERVATION UNITS FOR THE SAMPLE ALLELE
#	5.1	Alter ISOSER_ALLELE table. Add columns SNLEVEL (LEVELNO of SAMPLENO), SNVALUE (SAMPLENO),MVLEVEL (LEVELNO of MVID) and MVVALUE. 
	
#	5.2	Update the ISOSER_ALLELE with SAMPLENO level and value and MVID level and  value
#		5.2.1 Update MVLEVEL field in the ISOSER_ALLELE table. 
			$up_qry =	"UPDATE isoser_allele,level_n ".
						"SET isoser_allele.mvlevel = level_n.levelno ".
						"WHERE ((isoser_allele.mvid = level_n.lvalue)  AND  (level_n.labelid=-7)) ";
			$sth = $dbh->do($up_qry);
			print ("\n5.2.1");

#		5.2.2	UPDATE SNLEVEL IN ISOSER_ALLELE
			$up_qry =	"UPDATE isoser_allele ,level_n  ".
						"SET isoser_allele.snlevel = level_n.levelno ".
						"WHERE ((isoser_allele.sampleno = level_n.lvalue ) AND (level_n.labelid=-2))";
			$sth = $dbh->do($up_qry);
			print ("\n5.2.2");

#		5.2.3	Update MVVALUE field in the ISOSER_ALLELE table. Values in this column should be equal to MVID
			$up_qry =	"UPDATE isoser_allele ,level_n ".
						"SET isoser_allele.mvvalue = level_n.lvalue ".
						"WHERE ((level_n.labelid=-7) AND (isoser_allele.mvid = level_n.lvalue)) ";
			$sth = $dbh->do(up_qry);
			print ("\n5.2.3");

#		5.2.4	 Update SNVALUE field in the ISOSER_ALLELE table. Values in this column should be equal to SAMPLENO
			$up_qry =	"UPDATE isoser_allele,level_n ".
						"SET isoser_allele.snvalue = level_n.lvalue ".
						"WHERE ((level_n.labelid=-2) AND (isoser_allele.sampleno = level_n.lvalue)) ";	
			$sth = $dbh->do(up_qry);
			print ("\n5.2.4");

#	5.3	Update OUNITID field in ISOSER_ALLELE table
#		5.3.1 Get the minimum of OUNITID  from the OINDEX table
#		5.3.2	Update OUNITID field in the ISOSER_ALLELE table
			$up_qry =	"UPDATE isoser_allele".
						"SET isoser_allele.ounitid = (SELECT min(c.ounitid) as mino from oindex as c)-isoser_allele.orderno";
			$sth = $dbh->prepare($up_qry);
			$up_all = $sth->execute();	
			$sth->finish();
			print ("\n5.3.2");

#	5.4	Append STUDY,SAMPLENO and MVID observation units to the OINDEX tables.
#		5.4.1	Append  observation units for the study factor
		$app_qry =	"INSERT INTO oindex ( ounitid, factorid, levelno, represno ) ".
					"SELECT isoser_allele.ounitid, -1 AS Expr3, -1 AS Expr2, -2 AS Expr1 ".
					"FROM isoser_allele ";	
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n5.4.1");

#		5.4.2	Append  observation units for the SAMPLENO factor
		$app_qry =	"INSERT INTO oindex ( ounitid, factorid, levelno, represno ) ".
					"SELECT isoser_allele.ounitid, -2 AS Expr3, isoser_allele.snlevel, -2 AS Expr1 ".
					"FROM isoser_allele";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n5.4.2");

#		5.4.3	Append  observation units for the MVID factor
		$app_qry =	"INSERT INTO oindex ( ounitid, factorid, levelno, represno ) ".
					"SELECT isoser_allele.ounitid, -7 AS Expr2, isoser_allele.mvlevel, -2 AS Expr1 ".
					"FROM isoser_allele";
		$sth = $dbh->prepare($app);
		$app_all = $sth->execute();
		$sth->finish();
		print ("\n5.4.3");

#6	ADD THE FREQUENCY IN THE DATA TABLE sdfsd
	$app_qry =	"INSERT INTO data_n ( ounitid, dvalue, variatid ) ".
				"SELECT isoser_allele.ounitid, isoser_allele.freq, -1 AS Expr1 ".
				"FROM isoser_allele ";
	$sth = $dbh->prepare($app);
	$app_all = $sth->execute();
	$sth->finish();
	print ("\n 6");

### disconnectdb     
$dbh->disconnect()
   or warn "Error disconnecting: $DBI::errstr\n";

exit;

